#pragma once
#include"FSM.hpp"
#include"../dynamic_matrix.hpp"
namespace aMazing
{
	class DFA :public FSM
	{
	public:
		void minimize()
		{
			DynamicMatrix<bool> distinct(nodes.size(), nodes.size());
			//Initialize distinct array
			for (int i = 1; i < distinct.getWidth(); i++)
			{
				for (int j = 0; j < distinct.getHeight() - 1; j++)
				{
					if ((isFinal(nodes[i]->getIdentifer()) &&
						isFinal(nodes[j]->getIdentifer())) == false)
					{
						distinct[i][j] = true;
					}
					else
					{
						distinct[i][j] = false;
					}
				}
			}
			//Loop until no change is made.
			bool hasDistinctChange = true;
			while (hasDistinctChange)
			{
				hasDistinctChange = false;
				for (AlphaType a : alphabet)
				{
					std::vector<Bridge>& trans = transitions[a];
					for (int i = 1; i < distinct.getWidth(); i++)
					{
						int id_a = nodes[i]->getIdentifer();
						for (int j = 0; j < distinct.getHeight() - 1; j++)
						{
							int id_b = nodes[j]->getIdentifer();
							int tran_a = lookUpTransitions(id_a, a);
							int tran_b = lookUpTransitions(id_b, a);
							int index_tran_a = searchNode(tran_a);
							int index_tran_b = searchNode(tran_b);
							if (index_tran_a == -1 ||
								index_tran_b == -1)
							{
								throw std::exception("No transition result found");
							}
							if (distinct[i][j] == false &&
								distinct[index_tran_a][index_tran_b] == true)
							{
								distinct[i][j] = true;
								hasDistinctChange = true;
							}
						}
					}
				}
			}
			//adapt the result table.
			//when cell's vaule is false,the nodes that cell's column and row stands can be merged. 
			for (int i = 1; i < distinct.getWidth(); i++)
			{
				for (int j = 0; j < distinct.getHeight() - 1; ++j)
				{
					if (distinct[i][j] == false)
					{
						std::vector<Bridge> asStart, asEnd;
						getNodeTransitions(nodes[j]->getIdentifer(), asStart, asEnd);
					}
				}
			}
			//
		}
	private:
		void getNodeTransitions(int id,std::vector<Bridge>& asStart,std::vector<Bridge>& asEnd)
		{
			for (AlphaType a : alphabet)
			{
				auto& trans = transitions[a];
				for (int i = 0; i < trans.size(); ++i)
				{
					if (trans[i].start == id)
					{
						asStart.push_back(trans[i]);
					}
					if (trans[i].end == id)
					{
						asEnd.push_back(trans[i]);
					}
				}
			}
		}
	};
}
